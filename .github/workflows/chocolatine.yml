name: chocolatine
run-name: ${{ github.actor }} asking for main action

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
  pull_request:
    branches-ignore:
      - 'ga-ignore-*'

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    name: check_coding_style
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:

      - name: Checkout GH repository
        uses:  actions/checkout@v4
        with:
          repository: ''

      - name: Run conding-style.sh
        run: check.sh . /tmp/

      - name: Create annotation for conding style error
        run: |
          input="/tmp/coding-style-reports.log"
          while IFS= read -r line;do
            fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${fields[2]} coding style error,file=${fields[0]},line=${fields[1]}::${fields[3]}"
          done < "$input"
          if [ $(cat /tmp/coding-style-reports.log | wc -l) -gt 0 ]; then
            exit 1
          fi

  check_program_compilation:
    name: check_program_compilation
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container:
      image: epitechcontent/epitest-docker
    needs: [check_coding_style]
    steps:

      - name: Checkout GH repository
        uses: actions/checkout@v4
        with:
          repository: ''

      - name: Compile project
        run: make

      - name: Clean project
        run: make clean

      - name: Check executables
      run: |
        IFS=',' read -ra EXECS <<< "${{ env.EXECUTABLES }}"
        for exec in "${EXECS[@]}"; do
        if [ ! -x "$exec" ]; then
          echo "::error::Executable $exec not found or not executable"
          exit 1
        else
          $exec --version &> /dev/null
          if [ $? -ne 0 ]; then
            echo "::error::Executable $exec failed to run correctly"
            exit 1
          fi
        fi
        done

  run_tests:
    name: run_tests
    runs-on: ubuntu-latest
    timeout-minutes: 2
    container:
      image: epitechcontent/epitest-docker
    needs: [check_program_compilation]
    steps:

      - name: Checkout GH repository
        uses: actions/checkout@v4
        with:
          repository: ''

      - name: Compile project
        run: make tests_run

  push_to_mirror:
    name: push_to_mirror
    runs-on: ubuntu-latest
    needs: [run_tests]
    if: github.event_name == 'push'
    steps:

      - name: Checkout GH repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Push to mirror repository
        uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url:
            ${{ vars.MIRROR_URL }}
          ssh_private_key:
            ${{ secrets.GIT_SSH_PRIVATE_KEY }}